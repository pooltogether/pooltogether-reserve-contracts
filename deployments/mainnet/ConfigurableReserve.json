{
  "address": "0xd1797D46C3E825fce5215a0259D3426a5c49455C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "DefaultReserveRateMantissaSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prizePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reserveRateMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useCustom",
          "type": "bool"
        }
      ],
      "name": "ReserveRateMantissaSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategist",
          "type": "address"
        }
      ],
      "name": "ReserveWithdrawStrategistChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "defaultReserveRateMantissa",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prizePoolMantissas",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "rateMantissa",
          "type": "uint224"
        },
        {
          "internalType": "bool",
          "name": "useCustom",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "reserveRateMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint224",
          "name": "_reserveRateMantissa",
          "type": "uint224"
        }
      ],
      "name": "setDefaultReserveRateMantissa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        },
        {
          "internalType": "uint224[]",
          "name": "_reserveRates",
          "type": "uint224[]"
        },
        {
          "internalType": "bool[]",
          "name": "useCustom",
          "type": "bool[]"
        }
      ],
      "name": "setReserveRateMantissa",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setWithdrawStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "prizePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawStrategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x19b430cdc806be84f50f57ed4b5838241ff63ccedf6dcc42a624da4bb9b20a69",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0xd1797D46C3E825fce5215a0259D3426a5c49455C",
    "transactionIndex": 87,
    "gasUsed": "661330",
    "logsBloom": "0x
    "blockHash": "0x69c8821cccc328c9c900f9f63312278909cae5bee2d50c46d1d6a9f1e0018e87",
    "transactionHash": "0x19b430cdc806be84f50f57ed4b5838241ff63ccedf6dcc42a624da4bb9b20a69",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 12155981,
        "transactionHash": "0x19b430cdc806be84f50f57ed4b5838241ff63ccedf6dcc42a624da4bb9b20a69",
        "address": "0xd1797D46C3E825fce5215a0259D3426a5c49455C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 271,
        "blockHash": "0x69c8821cccc328c9c900f9f63312278909cae5bee2d50c46d1d6a9f1e0018e87"
      }
    ],
    "blockNumber": 12155981,
    "cumulativeGasUsed": "9263136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "50715d10cb6a65a38ce88c609373be4e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"DefaultReserveRateMantissaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveRateMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useCustom\",\"type\":\"bool\"}],\"name\":\"ReserveRateMantissaSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"ReserveWithdrawStrategistChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"defaultReserveRateMantissa\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prizePoolMantissas\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"rateMantissa\",\"type\":\"uint224\"},{\"internalType\":\"bool\",\"name\":\"useCustom\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"reserveRateMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint224\",\"name\":\"_reserveRateMantissa\",\"type\":\"uint224\"}],\"name\":\"setDefaultReserveRateMantissa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"uint224[]\",\"name\":\"_reserveRates\",\"type\":\"uint224[]\"},{\"internalType\":\"bool[]\",\"name\":\"useCustom\",\"type\":\"bool[]\"}],\"name\":\"setReserveRateMantissa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setWithdrawStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prizePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStrategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reserveRateMantissa(address)\":{\"params\":{\"source\":\"The source for which the reserve rate should be return.  These are normally prize pools.\"},\"returns\":{\"_0\":\"The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000\"}},\"setDefaultReserveRateMantissa(uint224)\":{\"params\":{\"_reserveRateMantissa\":\"The new default reserve rate mantissa\"}},\"setReserveRateMantissa(address[],uint224[],bool[])\":{\"details\":\"Length must match sources param.\",\"params\":{\"_reserveRates\":\"The respective ReserveRates for the sources.  \",\"sources\":\"The sources for which to set the reserve rates.\"}},\"setWithdrawStrategist(address)\":{\"params\":{\"_strategist\":\"The new withdrawal strategist address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawReserve(address,address)\":{\"params\":{\"prizePool\":\"The Prize Pool to withdraw reserve\",\"to\":\"The reserve transfer destination address\"},\"returns\":{\"_0\":\"The amount of reserve withdrawn from the prize pool\"}}},\"title\":\"Implementation of IConfigurable reserve\",\"version\":1},\"userdoc\":{\"events\":{\"DefaultReserveRateMantissaSet(uint256)\":{\"notice\":\"Emitted when the default reserve rate mantissa was updated\"},\"ReserveRateMantissaSet(address,uint256,bool)\":{\"notice\":\"Emitted when the reserve rate mantissa was updated for a prize pool\"},\"ReserveWithdrawStrategistChanged(address)\":{\"notice\":\"Emitted when the withdraw strategist is changed\"}},\"kind\":\"user\",\"methods\":{\"defaultReserveRateMantissa()\":{\"notice\":\"Storage of the default rate mantissa\"},\"prizePoolMantissas(address)\":{\"notice\":\"Storage of Reserve Rate Mantissa associated with a Prize Pool\"},\"reserveRateMantissa(address)\":{\"notice\":\"Returns the reserve rate for a particular source\"},\"setDefaultReserveRateMantissa(uint224)\":{\"notice\":\"Sets the default ReserveRate mantissa\"},\"setReserveRateMantissa(address[],uint224[],bool[])\":{\"notice\":\"Allows the owner of the contract to set the reserve rates for a given set of sources.\"},\"setWithdrawStrategist(address)\":{\"notice\":\"Allows the owner of the contract to set the withdrawal strategy address\"},\"withdrawReserve(address,address)\":{\"notice\":\"Calls withdrawReserve on the Prize Pool\"},\"withdrawStrategist()\":{\"notice\":\"Storage of the address of a withdrawal strategist \"}},\"notice\":\"Provides an Ownable configurable reserve for prize pools. This includes an opt-out default rate for prize pools.  For flexibility this includes a specified withdraw Strategist address which can be set by the owner. The prize pool Reserve can withdrawn by the owner or the reserve strategist. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConfigurableReserve.sol\":\"ConfigurableReserve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ConfigurableReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IConfigurableReserve.sol\\\";\\nimport \\\"./IPrizePool.sol\\\";\\n\\n/// @title Implementation of IConfigurable reserve\\n/// @notice Provides an Ownable configurable reserve for prize pools. This includes an opt-out default rate for prize pools. \\n/// For flexibility this includes a specified withdraw Strategist address which can be set by the owner.\\n/// The prize pool Reserve can withdrawn by the owner or the reserve strategist. \\ncontract ConfigurableReserve is IConfigurableReserve, Ownable {\\n    \\n    /// @notice Storage of Reserve Rate Mantissa associated with a Prize Pool\\n    mapping(address => ReserveRate) public prizePoolMantissas;\\n\\n    /// @notice Storage of the address of a withdrawal strategist \\n    address public withdrawStrategist;\\n\\n    /// @notice Storage of the default rate mantissa\\n    uint224 public defaultReserveRateMantissa;\\n\\n    constructor() Ownable(){\\n\\n    }\\n\\n    /// @notice Returns the reserve rate for a particular source\\n    /// @param source The source for which the reserve rate should be return.  These are normally prize pools.\\n    /// @return The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000\\n    function reserveRateMantissa(address source) external override view returns (uint256){\\n        if(!prizePoolMantissas[source].useCustom){\\n            return uint256(defaultReserveRateMantissa);\\n        }\\n        // else return the custom rate\\n        return prizePoolMantissas[source].rateMantissa;\\n    }\\n\\n    /// @notice Allows the owner of the contract to set the reserve rates for a given set of sources.\\n    /// @dev Length must match sources param.\\n    /// @param sources The sources for which to set the reserve rates.\\n    /// @param _reserveRates The respective ReserveRates for the sources.  \\n    function setReserveRateMantissa(address[] calldata sources,  uint224[] calldata _reserveRates, bool[] calldata useCustom) external override onlyOwner{\\n        for(uint256 i = 0; i <  sources.length; i++){\\n            prizePoolMantissas[sources[i]].rateMantissa = _reserveRates[i];\\n            prizePoolMantissas[sources[i]].useCustom = useCustom[i];\\n            emit ReserveRateMantissaSet(sources[i], _reserveRates[i], useCustom[i]);\\n        }\\n    }\\n\\n    /// @notice Allows the owner of the contract to set the withdrawal strategy address\\n    /// @param _strategist The new withdrawal strategist address\\n    function setWithdrawStrategist(address _strategist) external override onlyOwner{\\n        withdrawStrategist = _strategist;\\n        emit ReserveWithdrawStrategistChanged(_strategist);\\n    }\\n\\n    /// @notice Calls withdrawReserve on the Prize Pool\\n    /// @param prizePool The Prize Pool to withdraw reserve\\n    /// @param to The reserve transfer destination address\\n    /// @return The amount of reserve withdrawn from the prize pool\\n    function withdrawReserve(address prizePool, address to) external override onlyOwnerOrWithdrawStrategist returns (uint256){\\n        return PrizePoolInterface(prizePool).withdrawReserve(to);\\n    }\\n\\n    /// @notice Sets the default ReserveRate mantissa\\n    /// @param _reserveRateMantissa The new default reserve rate mantissa\\n    function setDefaultReserveRateMantissa(uint224 _reserveRateMantissa) external override onlyOwner{\\n        defaultReserveRateMantissa = _reserveRateMantissa;\\n        emit DefaultReserveRateMantissaSet(_reserveRateMantissa);\\n    }\\n\\n    /// @notice Only allows the owner or current strategist to call a function\\n    modifier onlyOwnerOrWithdrawStrategist(){\\n        require(msg.sender == owner() || msg.sender == withdrawStrategist, \\\"!onlyOwnerOrWithdrawStrategist\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x50341605c716de4b07c0e37c823cbf4fae7fd36ef4d7bd21f5e2f5db0ac0bf5d\",\"license\":\"MIT\"},\"contracts/IConfigurableReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n\\ninterface IConfigurableReserve {\\n  \\n  ///@notice struct to store the reserve rate mantissa for an address and a flag to indicate to use the default reserve rate\\n  struct ReserveRate{\\n      uint224 rateMantissa;\\n      bool useCustom;\\n  }\\n\\n  /// @notice Returns the reserve rate for a particular source\\n  /// @param source The source for which the reserve rate should be return.  These are normally prize pools.\\n  /// @return The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000\\n  function reserveRateMantissa(address source) external view returns (uint256);\\n\\n  /// @notice Allows the owner of the contract to set the reserve rates for a given set of sources.\\n  /// @dev Length must match sources param.\\n  /// @param sources The sources for which to set the reserve rates.\\n  /// @param _reserveRates The respective ReserveRates for the sources.  \\n  function setReserveRateMantissa(address[] calldata sources,  uint224[] calldata _reserveRates, bool[] calldata useCustom) external;\\n\\n  /// @notice Allows the owner of the contract to set the withdrawal strategy address\\n  /// @param strategist The new withdrawal strategist address\\n  function setWithdrawStrategist(address strategist) external;\\n\\n  /// @notice Calls withdrawReserve on the Prize Pool\\n  /// @param prizePool The Prize Pool to withdraw reserve\\n  /// @param to The reserve transfer destination address\\n  function withdrawReserve(address prizePool, address to) external returns (uint256);\\n\\n  /// @notice Sets the default ReserveRate mantissa\\n  /// @param _reserveRateMantissa The new default reserve rate mantissa\\n  function setDefaultReserveRateMantissa(uint224 _reserveRateMantissa) external;\\n  \\n  /// @notice Emitted when the reserve rate mantissa was updated for a prize pool\\n  /// @param prizePool The prize pool address for which the rate was set\\n  /// @param reserveRateMantissa The respective reserve rate for the prizepool.\\n  /// @param useCustom Whether to use the custom reserve rate (true) or the default (false)\\n  event ReserveRateMantissaSet(address indexed prizePool, uint256 reserveRateMantissa, bool useCustom);\\n\\n  /// @notice Emitted when the withdraw strategist is changed\\n  /// @param strategist The updated strategist address\\n  event ReserveWithdrawStrategistChanged(address indexed strategist);\\n\\n  /// @notice Emitted when the default reserve rate mantissa was updated\\n  /// @param rate The new updated default mantissa rate\\n  event DefaultReserveRateMantissaSet(uint256 rate);\\n\\n}\",\"keccak256\":\"0xf4c90fc3f30ff12b5b4119488284987cb60a425f9d9c42b6d0af86b2ba3aafc8\",\"license\":\"MIT\"},\"contracts/IPrizePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.6;\\n\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\ninterface PrizePoolInterface {\\n    function withdrawReserve(address to) external returns (uint256);\\n}\",\"keccak256\":\"0x34ea5b85bfa3103b744dded3de46474d8221bcb6dd2cc25ce1b7cb7a15607d25\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b610a928061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806385b925ec1161007157806385b925ec1461018d5780638da5cb5b146101b1578063a0dc039b146101b9578063baede25e146102cd578063c5e7b3be146102f3578063f2fde38b14610317576100a9565b8063010dfa58146100ae5780635f365f10146100e657806361853b421461010e578063715018a61461013c5780637ad4ee0d14610144575b600080fd5b6100d4600480360360208110156100c457600080fd5b50356001600160a01b031661033d565b60408051918252519081900360200190f35b61010c600480360360208110156100fc57600080fd5b50356001600160e01b031661039f565b005b6100d46004803603604081101561012457600080fd5b506001600160a01b0381358116916020013516610455565b61010c61055b565b61016a6004803603602081101561015a57600080fd5b50356001600160a01b0316610607565b604080516001600160e01b03909316835290151560208301528051918290030190f35b61019561062e565b604080516001600160a01b039092168252519081900360200190f35b61019561063d565b61010c600480360360608110156101cf57600080fd5b8101906020810181356401000000008111156101ea57600080fd5b8201836020820111156101fc57600080fd5b8035906020019184602083028401116401000000008311171561021e57600080fd5b91939092909160208101903564010000000081111561023c57600080fd5b82018360208201111561024e57600080fd5b8035906020019184602083028401116401000000008311171561027057600080fd5b91939092909160208101903564010000000081111561028e57600080fd5b8201836020820111156102a057600080fd5b803590602001918460208302840111640100000000831117156102c257600080fd5b50909250905061064c565b61010c600480360360208110156102e357600080fd5b50356001600160a01b0316610855565b6102fb610901565b604080516001600160e01b039092168252519081900360200190f35b61010c6004803603602081101561032d57600080fd5b50356001600160a01b0316610910565b6001600160a01b038116600090815260016020526040812054600160e01b900460ff1661037657506003546001600160e01b031661039a565b506001600160a01b0381166000908152600160205260409020546001600160e01b03165b919050565b6103a7610a12565b6001600160a01b03166103b861063d565b6001600160a01b031614610401576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600380546001600160e01b0383166001600160e01b0319909116811790915560408051918252517fc86c3cce30b0573c71caeabb76b3c908826697d53b53a8ffb8a46743fc39ea6e9181900360200190a150565b600061045f61063d565b6001600160a01b0316336001600160a01b0316148061048857506002546001600160a01b031633145b6104d9576040805162461bcd60e51b815260206004820152601e60248201527f216f6e6c794f776e65724f725769746864726177537472617465676973740000604482015290519081900360640190fd5b826001600160a01b03166352a387ab836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b15801561052857600080fd5b505af115801561053c573d6000803e3d6000fd5b505050506040513d602081101561055257600080fd5b50519392505050565b610563610a12565b6001600160a01b031661057461063d565b6001600160a01b0316146105bd576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001602052600090815260409020546001600160e01b03811690600160e01b900460ff1682565b6002546001600160a01b031681565b6000546001600160a01b031690565b610654610a12565b6001600160a01b031661066561063d565b6001600160a01b0316146106ae576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b60005b8581101561084c578484828181106106c557fe5b905060200201356001600160e01b0316600160008989858181106106e557fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a8154816001600160e01b0302191690836001600160e01b0316021790555082828281811061074857fe5b9050602002013515156001600089898581811061076157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600001601c6101000a81548160ff0219169083151502179055508686828181106107b757fe5b905060200201356001600160a01b03166001600160a01b03167f1069081ee8013d1696dd56236d8de825f20e1a9349aa08d09cedb868dac61c858686848181106107fd57fe5b905060200201356001600160e01b031685858581811061081957fe5b604080516001600160e01b03909516855260209182029390930135151590840152508051918290030190a26001016106b1565b50505050505050565b61085d610a12565b6001600160a01b031661086e61063d565b6001600160a01b0316146108b7576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e6ccfaa4c27cf9175e92dd72903fce6e829f5870d59756148197ecc124646b590600090a250565b6003546001600160e01b031681565b610918610a12565b6001600160a01b031661092961063d565b6001600160a01b031614610972576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b6001600160a01b0381166109b75760405162461bcd60e51b8152600401808060200182810382526026815260200180610a176026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122086b69bb3f78475fa76a5f758fbdf2384bcc7025d6add964d1a0164260abf542064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806385b925ec1161007157806385b925ec1461018d5780638da5cb5b146101b1578063a0dc039b146101b9578063baede25e146102cd578063c5e7b3be146102f3578063f2fde38b14610317576100a9565b8063010dfa58146100ae5780635f365f10146100e657806361853b421461010e578063715018a61461013c5780637ad4ee0d14610144575b600080fd5b6100d4600480360360208110156100c457600080fd5b50356001600160a01b031661033d565b60408051918252519081900360200190f35b61010c600480360360208110156100fc57600080fd5b50356001600160e01b031661039f565b005b6100d46004803603604081101561012457600080fd5b506001600160a01b0381358116916020013516610455565b61010c61055b565b61016a6004803603602081101561015a57600080fd5b50356001600160a01b0316610607565b604080516001600160e01b03909316835290151560208301528051918290030190f35b61019561062e565b604080516001600160a01b039092168252519081900360200190f35b61019561063d565b61010c600480360360608110156101cf57600080fd5b8101906020810181356401000000008111156101ea57600080fd5b8201836020820111156101fc57600080fd5b8035906020019184602083028401116401000000008311171561021e57600080fd5b91939092909160208101903564010000000081111561023c57600080fd5b82018360208201111561024e57600080fd5b8035906020019184602083028401116401000000008311171561027057600080fd5b91939092909160208101903564010000000081111561028e57600080fd5b8201836020820111156102a057600080fd5b803590602001918460208302840111640100000000831117156102c257600080fd5b50909250905061064c565b61010c600480360360208110156102e357600080fd5b50356001600160a01b0316610855565b6102fb610901565b604080516001600160e01b039092168252519081900360200190f35b61010c6004803603602081101561032d57600080fd5b50356001600160a01b0316610910565b6001600160a01b038116600090815260016020526040812054600160e01b900460ff1661037657506003546001600160e01b031661039a565b506001600160a01b0381166000908152600160205260409020546001600160e01b03165b919050565b6103a7610a12565b6001600160a01b03166103b861063d565b6001600160a01b031614610401576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600380546001600160e01b0383166001600160e01b0319909116811790915560408051918252517fc86c3cce30b0573c71caeabb76b3c908826697d53b53a8ffb8a46743fc39ea6e9181900360200190a150565b600061045f61063d565b6001600160a01b0316336001600160a01b0316148061048857506002546001600160a01b031633145b6104d9576040805162461bcd60e51b815260206004820152601e60248201527f216f6e6c794f776e65724f725769746864726177537472617465676973740000604482015290519081900360640190fd5b826001600160a01b03166352a387ab836040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b15801561052857600080fd5b505af115801561053c573d6000803e3d6000fd5b505050506040513d602081101561055257600080fd5b50519392505050565b610563610a12565b6001600160a01b031661057461063d565b6001600160a01b0316146105bd576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6001602052600090815260409020546001600160e01b03811690600160e01b900460ff1682565b6002546001600160a01b031681565b6000546001600160a01b031690565b610654610a12565b6001600160a01b031661066561063d565b6001600160a01b0316146106ae576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b60005b8581101561084c578484828181106106c557fe5b905060200201356001600160e01b0316600160008989858181106106e557fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060000160006101000a8154816001600160e01b0302191690836001600160e01b0316021790555082828281811061074857fe5b9050602002013515156001600089898581811061076157fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600001601c6101000a81548160ff0219169083151502179055508686828181106107b757fe5b905060200201356001600160a01b03166001600160a01b03167f1069081ee8013d1696dd56236d8de825f20e1a9349aa08d09cedb868dac61c858686848181106107fd57fe5b905060200201356001600160e01b031685858581811061081957fe5b604080516001600160e01b03909516855260209182029390930135151590840152508051918290030190a26001016106b1565b50505050505050565b61085d610a12565b6001600160a01b031661086e61063d565b6001600160a01b0316146108b7576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f5e6ccfaa4c27cf9175e92dd72903fce6e829f5870d59756148197ecc124646b590600090a250565b6003546001600160e01b031681565b610918610a12565b6001600160a01b031661092961063d565b6001600160a01b031614610972576040805162461bcd60e51b81526020600482018190526024820152600080516020610a3d833981519152604482015290519081900360640190fd5b6001600160a01b0381166109b75760405162461bcd60e51b8152600401808060200182810382526026815260200180610a176026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122086b69bb3f78475fa76a5f758fbdf2384bcc7025d6add964d1a0164260abf542064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reserveRateMantissa(address)": {
        "params": {
          "source": "The source for which the reserve rate should be return.  These are normally prize pools."
        },
        "returns": {
          "_0": "The reserve rate as a fixed point 18 number, like Ether.  A rate of 0.05 = 50000000000000000"
        }
      },
      "setDefaultReserveRateMantissa(uint224)": {
        "params": {
          "_reserveRateMantissa": "The new default reserve rate mantissa"
        }
      },
      "setReserveRateMantissa(address[],uint224[],bool[])": {
        "details": "Length must match sources param.",
        "params": {
          "_reserveRates": "The respective ReserveRates for the sources.  ",
          "sources": "The sources for which to set the reserve rates."
        }
      },
      "setWithdrawStrategist(address)": {
        "params": {
          "_strategist": "The new withdrawal strategist address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawReserve(address,address)": {
        "params": {
          "prizePool": "The Prize Pool to withdraw reserve",
          "to": "The reserve transfer destination address"
        },
        "returns": {
          "_0": "The amount of reserve withdrawn from the prize pool"
        }
      }
    },
    "title": "Implementation of IConfigurable reserve",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DefaultReserveRateMantissaSet(uint256)": {
        "notice": "Emitted when the default reserve rate mantissa was updated"
      },
      "ReserveRateMantissaSet(address,uint256,bool)": {
        "notice": "Emitted when the reserve rate mantissa was updated for a prize pool"
      },
      "ReserveWithdrawStrategistChanged(address)": {
        "notice": "Emitted when the withdraw strategist is changed"
      }
    },
    "kind": "user",
    "methods": {
      "defaultReserveRateMantissa()": {
        "notice": "Storage of the default rate mantissa"
      },
      "prizePoolMantissas(address)": {
        "notice": "Storage of Reserve Rate Mantissa associated with a Prize Pool"
      },
      "reserveRateMantissa(address)": {
        "notice": "Returns the reserve rate for a particular source"
      },
      "setDefaultReserveRateMantissa(uint224)": {
        "notice": "Sets the default ReserveRate mantissa"
      },
      "setReserveRateMantissa(address[],uint224[],bool[])": {
        "notice": "Allows the owner of the contract to set the reserve rates for a given set of sources."
      },
      "setWithdrawStrategist(address)": {
        "notice": "Allows the owner of the contract to set the withdrawal strategy address"
      },
      "withdrawReserve(address,address)": {
        "notice": "Calls withdrawReserve on the Prize Pool"
      },
      "withdrawStrategist()": {
        "notice": "Storage of the address of a withdrawal strategist "
      }
    },
    "notice": "Provides an Ownable configurable reserve for prize pools. This includes an opt-out default rate for prize pools.  For flexibility this includes a specified withdraw Strategist address which can be set by the owner. The prize pool Reserve can withdrawn by the owner or the reserve strategist. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 147,
        "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
        "label": "prizePoolMantissas",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(ReserveRate)334_storage)"
      },
      {
        "astId": 150,
        "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
        "label": "withdrawStrategist",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 153,
        "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
        "label": "defaultReserveRateMantissa",
        "offset": 0,
        "slot": "3",
        "type": "t_uint224"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(ReserveRate)334_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IConfigurableReserve.ReserveRate)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveRate)334_storage"
      },
      "t_struct(ReserveRate)334_storage": {
        "encoding": "inplace",
        "label": "struct IConfigurableReserve.ReserveRate",
        "members": [
          {
            "astId": 331,
            "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
            "label": "rateMantissa",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          },
          {
            "astId": 333,
            "contract": "contracts/ConfigurableReserve.sol:ConfigurableReserve",
            "label": "useCustom",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      }
    }
  }
}